class Node{
    Node links[]= new Node[26];
    int endWith=0;
    int countPrefix=0;
    
    Node(){
        
    }
    
    boolean containsKey(char ch){
        return links[ch-'a']!=null;
    }
    
    Node get(char ch){
        return links[ch-'a'];
    }
    
    void put(char ch, Node node){
        links[ch-'a']=node;
    }
    
    void increaseEnd(){
        endWith++;
    }
    
    void decreaseEnd(){
        endWith--;
    }
    
    void increasePrefix(){
        countPrefix++;
    }
    
    void decresePrefix(){
         countPrefix--;
    }
    
    int getPrefix(){
        return countPrefix;
    }
    
    int getEnd(){
        return endWith;
    }
}
public class Trie {
    private Node root;
    public Trie() {
        // Write your code here.
        root = new Node();
    }

    public void insert(String word) {
        // Write your code here.
        Node node=root; 
        for(int i=0;i<word.length();i++){
            if(!node.containsKey(word.charAt(i))){
                node.put(word.charAt(i),new Node());
            }
            node=node.get(word.charAt(i));
            node.increasePrefix();
        }
        node.increaseEnd();
    }

    public int countWordsEqualTo(String word) {
        // Write your code here.
        Node node=root;
        for(int i=0;i<word.length();i++){
            if(node.containsKey(word.charAt(i))){
                node=node.get(word.charAt(i));
            }
            else{
                return 0;
            }
        }
        return node.getEnd();
    }

    public int countWordsStartingWith(String word) {
        // Write your code here.
        Node node=root;
        for(int i=0;i<word.length();i++){
            if(node.containsKey(word.charAt(i))){
                node=node.get(word.charAt(i));
            }
            else{
                return 0;
            }
        }
        return node.getPrefix();
    }

    public void erase(String word) {
        // Write your code here.
        Node node=root;
        for(int i=0;i<word.length();i++){
            if(node.containsKey(word.charAt(i))){
                node=node.get(word.charAt(i));
                node.decresePrefix();
            }
            else{
                return;
            }
        }
        node.decreaseEnd();
    }

}
