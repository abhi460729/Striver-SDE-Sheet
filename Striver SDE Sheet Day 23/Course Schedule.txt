class Solution {
    public boolean checkCycle(int node, ArrayList<ArrayList<Integer>> adj, int visited[]) {
        if(visited[node]==2)
            return true;
        
        visited[node]=2;
        
        for(Integer it:adj.get(node)){
            if(visited[it]!=1){
                if(checkCycle(it,adj,visited)==true){
                    return true;
                }
            }
        }
        
        visited[node]=1;
        
        return false;
    }
    
    public boolean isCyclicDeadlock(int V, ArrayList<ArrayList<Integer>> adj) {
        int visited[] = new int[V];
        for(int i=0;i<V;i++){
            if(visited[i]==0){
                if(checkCycle(i,adj,visited)){
                    return false;
                }
            }
        }
        return true;
    }
    
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        
        ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();
        for(int i=0;i<numCourses;i++){
            adj.add(new ArrayList<Integer>());
        }
        
        for(int[] pre:prerequisites){
            adj.get(pre[0]).add(pre[1]);
        }
        
        boolean result=isCyclicDeadlock(numCourses,adj);
        return result;
    }
}
//0->Unvisited
//1->Visited
//2->Processed
