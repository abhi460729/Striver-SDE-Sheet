static boolean isPalindrome(String str, int i, int j){
        if(i==j){
            return true;
        }
        if(i>j){
            return true;
        }
        while(i<j){
            if(str.charAt(i)!=str.charAt(j)){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
    static int palindromicPartitionHelper(String str, int i, int j,int dp[][]){
        if(i>=j)
            return 0;
        if(str.length()==0)
            return 0;
        if(isPalindrome(str,i,j)==true){
            return 0;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        int ans=Integer.MAX_VALUE;
        for(int k=i;k<j;k++){
            int left,right;
            if(dp[i][k]!=-1){
                left=dp[i][k];
            }
            else{
                left=palindromicPartitionHelper(str,i,k,dp);
                dp[i][k]=left;
            }
            if(dp[k+1][j]!=-1){
                right=dp[k+1][j];
            }
            else{
                right=palindromicPartitionHelper(str,k+1,j,dp);
                dp[k+1][j]=right;
            }
            int temp=1+left+right;
            ans=Math.min(temp,ans);
        }
        return dp[i][j]=ans;
    }
    static int palindromicPartition(String str)
    {
        // code here
        int dp[][] = new int[str.length()][str.length()];
        for(int i=0;i<str.length();i++){
            for(int j=0;j<str.length();j++){
                dp[i][j]=-1;
            }
        }
        int i=0;
        int j=str.length()-1;
        return palindromicPartitionHelper(str,i,j,dp);
    }