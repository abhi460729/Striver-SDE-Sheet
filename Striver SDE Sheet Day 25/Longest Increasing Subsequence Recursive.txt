class Solution {
    public int lengthOfLIS(int[] nums) {
        int dp[][]= new int[nums.length][nums.length];
        for(int i=0;i<nums.length;i++){
            for(int j=0;j<nums.length;j++){
                dp[i][j]=0;
            }
        }
        int result=lengthOfLISHelper(-1,0,nums,dp);
        for(int i=0;i<nums.length;i++){
            for(int j=0;j<nums.length;j++){
                System.out.print(dp[i][j]+" ");
            }
            System.out.println();
        }
        return result;
    }
    public int lengthOfLISHelper(int prev, int curr, int nums[],int dp[][]){
        if(curr==nums.length){
            return 0;
        }
        if(prev!=-1 && dp[prev][curr]!=0){
            return dp[prev][curr];
        }
        int op1=0;
        if(prev==-1 || nums[prev]<nums[curr]){
            op1=1+lengthOfLISHelper(curr,curr+1,nums,dp);
        }
        int op2=lengthOfLISHelper(prev,curr+1,nums,dp);
        
        if(prev!=-1){
            dp[prev][curr]=Math.max(op1,op2);
        }
        return Math.max(op1,op2);
    } 
}
//TC=O(N^2)
//SC=O(1)