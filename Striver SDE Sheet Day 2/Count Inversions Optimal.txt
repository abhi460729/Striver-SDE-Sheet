public class Solution {
    public static long merge(long arr[], long temp[], int low, int mid, int high){
        int i=low;
        int j=mid;
        int k=low;
        long inv_count=0;
        while((i<=mid-1) && (j<=high)){
            if(arr[i]<=arr[j]){
                temp[k++]=arr[i++];
            }
            else{
                temp[k++]=arr[j++];
                inv_count+=(mid-i);
            }
        }
        
        while(i<=mid-1){
            temp[k++]=arr[i++];
        }
        
        while(j<=high){
            temp[k++]=arr[j++];
        }
        
        for(i=low;i<=high;i++){
            arr[i]=temp[i];
        }
        
        return inv_count;
    }
    public static long mergeSort(long arr[], long temp[], int low, int high){
        	long inv_count=0;
            if(low<high){
                int mid=low+(high-low)/2;
                inv_count+=mergeSort(arr,temp,low,mid);
                inv_count+=mergeSort(arr,temp,mid+1,high);
                inv_count+=merge(arr,temp,low,mid+1,high);
            }
        	return inv_count;
    }
    public static long getInversions(long arr[], int n) {
        // Write your code here.
        int i=0, j=n-1;
        long temp[] = new long[n];
        long result=mergeSort(arr,temp,i,j);
        return result;
    }
}