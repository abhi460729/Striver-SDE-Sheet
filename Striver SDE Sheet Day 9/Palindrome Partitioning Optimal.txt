class Solution {
    static void func(int index, String s, List<List<String>> ansList,List<String> path){
        if(index==s.length()){
            ansList.add(new ArrayList<>(path));
            return;
        }
        for(int i=index;i<s.length();i++){
            if(isPalindrome(s,index,i)){
                path.add(s.substring(index,i+1));
                func(i+1,s,ansList,path);
                path.remove(path.size()-1);
            }
        }
    }
    public List<List<String>> partition(String s) {
        List<List<String>> ansList= new ArrayList<>();
        List<String> path = new ArrayList<>();
        func(0,s,ansList,path);
        return ansList;
    }
    public static boolean isPalindrome(String s, int start, int end){
        while(start<=end){
            if(s.charAt(start++)!=s.charAt(end--)){
                return false;
            }
        }
        return true;
    }
}
//Time Complexity: O( (2^n) *k*(n/2) )
//Space Complexity: O(k * x)