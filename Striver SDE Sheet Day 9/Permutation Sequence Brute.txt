class Solution {
    static void swap(char s[], int i, int j){
        char t=s[i];
        s[i]=s[j];
        s[j]=t;
    }
    static void solve(char s[], int index, ArrayList<String> ans){
        if(index==s.length){
            String str=new String(s);
            ans.add(str);
            return;
        }
        for(int i=index;i<s.length;i++){
            swap(s,i,index);
            solve(s,index+1,ans);
            swap(s,i,index);
        }
    }
    public String getPermutation(int n, int k) {
        String s="";
        ArrayList<String> ans= new ArrayList<>();
        for(int i=1;i<=n;i++){
            s+=i;
        }
        solve(s.toCharArray(),0,ans);
        Collections.sort(ans);
        return ans.get(k-1);
    }
}
//TC=O(Time complexity: O(N! * N) +O(N! Log N!))
//SC=O(N)