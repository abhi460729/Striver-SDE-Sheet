class Solution {
    public void subsetsWithDupHelper(int ind, ArrayList<Integer> ds, int[] nums, List<List<Integer>> ansList){
        ansList.add(new ArrayList<>(ds));
        for(int i=ind;i<nums.length;i++){
            if(i!=ind && nums[i]==nums[i-1])continue;
            ds.add(nums[i]);
            subsetsWithDupHelper(i+1,ds,nums,ansList);
            ds.remove(ds.size()-1);
        }
    }
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> ansList= new ArrayList<>();
        ArrayList<Integer> ds= new ArrayList<>();
        subsetsWithDupHelper(0,ds,nums,ansList);
        return ansList;
    }
}


/*Time Complexity: O(2^n) for generating every subset and O(k)  to insert every subset in another data structure if the average length of every subset is k. Overall O(k * 2^n).

Space Complexity: O(2^n * k) to store every subset of average length k. Auxiliary space is O(n)  if n is the depth of the recursion tree.*/