/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        Queue<TreeNode> queue= new LinkedList<TreeNode>();
        List<List<Integer>> ans= new ArrayList<>();
        if(root==null)
            return ans;
        queue.offer(root);
        boolean flag=true;
        while(!queue.isEmpty()){
            int levelNum=queue.size();
            ArrayList<Integer> subAnswer=new ArrayList<Integer>(levelNum);
            for(int i=0;i<levelNum;i++){
                if(queue.peek().left!=null){
                    queue.offer(queue.peek().left);
                }
                if(queue.peek().right!=null){
                    queue.offer(queue.peek().right);
                }
                if(flag==true){
                    subAnswer.add(queue.poll().val);
                }
                else{
                    subAnswer.add(0,queue.poll().val);
                }
            }
            flag=!flag;
            ans.add(subAnswer);
        }
        return ans;
    }
}
//TC=O(N)
//SC=O(N)