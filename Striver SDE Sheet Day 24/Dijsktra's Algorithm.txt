class Node implements Comparator<Node>{
    private int v;
    private int weight;
    
    Node(int _v, int _weight){
        v=_v;
        weight=_weight;
    }
    
    Node(){
        
    }
    
    int getV(){
        return v;
    }
    
    int getWeight(){
        return weight;
    }
    
    @Override
    public int compare(Node node1, Node node2){
        if(node1.weight<node2.weight){
            return -1;
        }
        if(node1.weight>node2.weight){
            return 1;
        }
        return 0;
    }
}

class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        // Write your code here
        
        int distance[]= new int[V];
        
        for(int i=0;i<V;i++){
            distance[i]=100000000;
        }
        
        distance[S]=0;
        
        PriorityQueue<Node> pq= new PriorityQueue<Node>(V,new Node());
        
        pq.add(new Node(S,0));
        
        while(pq.size()>0){
            Node node=pq.poll();
            for(ArrayList<Integer> it:adj.get(node.getV())){
                if(distance[node.getV()]+it.get(1)<distance[it.get(0)]){
                    distance[it.get(0)]=distance[node.getV()]+it.get(1);
                    pq.add(new Node(it.get(0),distance[it.get(0)]));
                }
            }
        }
        
        return distance;
        
    }
}



