class Node implements Comparator < Node > {
    private int v;
    private int weight;
    
    Node(int _v, int _weight){
        v=_v;
        weight=_weight;
    }
    
    Node(){
        
    }
    
    int getV(){
        return v;
    }
    
    int getWeight(){
        return weight;
    }
    
    @Override
    public int compare(Node node1, Node node2){
        if(node1.weight<node2.weight){
            return -1;
        }
        if(node1.weight>node2.weight){
            return 1;
        }
        return 0;
    }
}

class Solution
{
    //Function to find sum of weights of edges of the Minimum Spanning Tree.
    static int spanningTree(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj) 
    {
        // Add your code here
        int key[]= new int[V];
        int parent[]= new int[V];
        boolean mst[]= new boolean[V];
        
        for(int i=0;i<V;i++){
            key[i]=100000000;
            mst[i]=false;
        }
        
        PriorityQueue< Node > pq= new PriorityQueue< Node > (V, new Node());
        key[0]=0;
        parent[0]=-1;
        pq.add(new Node(key[0],0));
        
        while(!pq.isEmpty()){
            int u=pq.poll().getV();
            mst[u]=true;
            for(ArrayList<Integer> it:adj.get(u)){
                if(mst[it.get(0)]==false && it.get(1)<key[it.get(0)]){
                    parent[it.get(0)]=u;
                    key[it.get(0)]=it.get(1);
                    pq.add(new Node(it.get(0),key[it.get(0)]));
                }
            }
        }
        
        int sum=0;
        for(int i=0;i<V;i++){
            sum+=key[i];
        }
        return sum;
    }
}