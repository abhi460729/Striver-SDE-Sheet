class Node{
    
    private int u;
    private int v;
    private int weight;
    
    Node(int _u, int _v, int _weight){
        u=_u;
        v=_v;
        weight=_weight;
    }
    
    Node(){
        
    }
    
    int getU(){
        return u;
    }
    
    int getV(){
        return v;
    }
    
    int getWeight(){
        return weight;
    }
    
}
class SortComparator implements Comparator<Node>{
    @Override
    public int compare(Node node1, Node node2){
        if(node1.getWeight()<node2.getWeight()){
            return -1;
        }
        if(node1.getWeight()>node2.getWeight()){
            return 1;
        }
        return 0;
    }
}

class Solution
{
    static int findParent(int u, int parent[]) {
		if(u==parent[u]) return u;
		return parent[u] = findParent(parent[u], parent); 
	}
    
    static void union(int u, int v, int parent[], int rank[]){
        u=findParent(u,parent);
        v=findParent(v,parent);
        if(rank[u]<rank[v]){
            parent[u]=v;
        }
        else if(rank[v]<rank[u]){
            parent[v]=u;
        }
        else{
            parent[v]=u;
            rank[u]++;
        }
    }
    //Function to find sum of weights of edges of the Minimum Spanning Tree.
    static int spanningTree(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj) 
    {
        // Add your code here
        ArrayList<Node> adjacency= new ArrayList<Node>();
        
        for(int i=0;i<V;i++){
            for(ArrayList<Integer> al:adj.get(i)){
                adjacency.add(new Node(i,al.get(0),al.get(1)));
            }
        }
        
        Collections.sort(adjacency,new SortComparator());
        
        int parent[]= new int[V];
        int rank[]= new int[V];
        
        for(int i=0;i<V;i++){
            parent[i]=i;
            rank[i]=0;
        }
        
        int costMst=0;
        
        for(Node it:adjacency){
            if(findParent(it.getU(),parent)!=findParent(it.getV(),parent)){
                costMst+=it.getWeight();
                union(it.getU(),it.getV(),parent,rank);
            }
        }
        
        return costMst;
    }
}
