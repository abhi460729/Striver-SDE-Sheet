import java.util.*;
class Pair{
    BinaryTreeNode<Integer> node;
    int num;
    Pair(BinaryTreeNode<Integer> node, int num){
        this.node=node;
        this.num=num;
    }
}
public class Solution {
    public static List<List<Integer>> getTreeTraversal(BinaryTreeNode<Integer> root) {
        // Write your code here.
        Stack<Pair> st= new Stack<Pair>();
        st.push(new Pair(root,1));
        List<List<Integer>> answer= new ArrayList<List<Integer>>();
        List<Integer> preorder= new ArrayList<Integer>();
        List<Integer> inorder= new ArrayList<Integer>();
        List<Integer> postorder= new ArrayList<Integer>();
        if(root==null){
            return answer;
        }
        while(!st.isEmpty()){
            Pair it=st.pop();
            if(it.num==1){
               preorder.add(it.node.data);
               it.num++;
               st.push(it);
               if(it.node.left!=null){
                   st.push(new Pair(it.node.left,1));
               }
            }
            else if(it.num==2){
               inorder.add(it.node.data);
               it.num++;
               st.push(it);
               if(it.node.right!=null){
                   st.push(new Pair(it.node.right,1));
               }
            }
            else{
                postorder.add(it.node.data);
            }
        }
        answer.add(inorder);
        answer.add(preorder);
        answer.add(postorder);
        return answer;
    }
}
//TC=O(3*N)
//SC=O(4*N)