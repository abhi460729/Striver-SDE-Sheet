class TreeNode{
	int data;
	TreeNode left, right;
	TreeNode(int data){
		this.data=data;
		left=null;
		right=null;
	}
}
class Tuple{
	int level;
	int vertical;
	TreeNode node;
	Tuple(TreeNode _node, int _level, int _vertical){
		node=_node;
		level=_level;
		vertical=_vertical;
	}
}
public class TUF{
	public static List<List<Integer>> findVertical(TreeNode root){
		TreeMap<Integer,TreeMap<Integer,PriorityQueue<Integer>>> map= new TreeMap<>();
		Queue<Tuple> q= new LinkedList<>();
		q.offer(new Tuple(root,0,0));
		while(!q.empty()){
			Tuple tuple=q.poll();
			TreeNode node=tuple.node;
			int x=tuple.level;
			int y=tuple.vertical;
			if(!map.containsKey(x)){
				map.put(x, new TreeMap<>());
			}
			if(!map.get(x).containsKey(y)){
				map.put(y, new PriorityQueue<>());
			}
			map.get(x).get(y).offer(node.data);
			if(node.left!=null){
				q.offer(node.left,x-1,y+1);
			}
			if(node.right!=null){
				q.offer(node.right,x+1,y+1);
			}
		}
	List<List<Integer>> list = new ArrayList<>();
	for(TreeMap<Integer,PriorityQueue<Integer>> ys: map.values()){
		list.add(new ArrayList<>());
		for(PriorityQueue<Integer> nodes:ys.values()){
			while(!nodes.isEmpty()){
				list.get(list.size()-1).add(nodes.poll());
			}
		}
	}
	return list;
}